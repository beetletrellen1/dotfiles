#!/bin/bash

stty -ctlecho

# Time in seconds
short_break_in_seconds=14
long_break_in_seconds=$((8*60))
short_interval_in_seconds=$((4*60))
long_interval_in_seconds=$((50*60))
log_file="$HOME/tmp/event.log"
config_directory="$HOME/.config/stop_rsi"

break_timer() {
    local i=0
    local last_key=$(last_key)
    local restart=false

    while [ $i -lt $1 ]; do
        if [[ "$last_key" != $(last_key) ]]; then
            last_key=$(last_key)
            restart=true
            break
        fi
        progress=$(echo "scale=2;$i*100/$1" | bc)
        time_left=$(($1-$i))
        echo "# $(format_time $time_left)"
        echo "$progress"  # Give correct percentage
        sleep 1
        i=$(( i+1 ))
    done

    if [[ restart = true ]]; then
        break_timer $1
    fi
}

last_key() {
    hex=$(tail -2 "$log_file" | head -1)
    IFS=' ' read -ra keys <<< "$hex"
    echo "${keys[0]}"
}

format_time() {
    minutes=$(($1/60))
    seconds=$(($1%60))

    echo $(printf "%2d:%02d" $minutes $seconds)
}

short_break() {
    local pid_keylogger=$(log_key_input)

    break_timer $short_break_in_seconds | alert_box "Short Break"

    cp /dev/null "$log_file"
    kill $pid_keylogger
}

long_break() {
    local pid_keylogger=$(log_key_input)

    break_timer $long_break_in_seconds | alert_box "Long Break"

    cp /dev/null "$log_file"
    kill $pid_keylogger
}

alert_box() {
    zenity \
        --progress \
        --title="$1(ESC to Postpone)" \
        --auto-close \
        --auto-kill \
        --no-cancel \
        --class='StopRSI' \
        --name='StopRSI' \
        --width=200
}

main() {
    i=1
    while [ $i ]; do
        if [[ $(( $i % $long_interval_in_seconds )) == 0 ]]
        then
            long_break
        elif [[ $(( $i % $short_interval_in_seconds )) == 0 ]]
        then
            short_break
        fi
        sleep 1;

        i=$(( i+1 ))
    done
}

cleanup() {
    echo "" &> /dev/null
    echo "Closing"
    echo "..."
    killall hexdump &> /dev/null
    exit $?
}

log_key_input() {
    cat /dev/input/event0 | hexdump > "$log_file" &
    echo "$!"
}

running_pid() {
    echo "$(tail -1 "$config_directory/pid" | head -1)"
}

check_for_running_process() {
    pid=""
    if [ -s "$config_directory/pid" ]; then
        pid=`ps -o pid= -p $(running_pid)`
    fi
    if [ -n "$pid" ]; then
        echo "Process is already running!"
        exit 1
    fi
}

mkdir -p "$config_directory"

trap "cleanup" 2

while getopts ":dk" opt; do
    case $opt in
        d)
            check_for_running_process
            main &
            pid="$!"
            echo "$pid" > "$config_directory/pid"
            echo "Set pid $pid in $config_directory/pid" >&2
            ;;
        k)
            if [ -s "$config_directory/pid" ]; then
                echo "Stopping stop_rsi"
                kill -9 $(tail -1 "$config_directory/pid" | head -1)
                cp /dev/null "$config_directory/pid"
            else
                echo "No process is currently running"
                exit 1
            fi
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
    esac
done

if [[ $# = 0 ]]; then
    echo "Running"
    main
fi
