* Start Emacs Server
Use emacs server so that loading any subsequent emacs instances will
boot immediately. In practice I use that for the occasion I use git on
the command line

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

* Package Management(use-package)
use-package will manage our all of our packages. It requires no
external dependencies and takes advantage of emacs' package library

Manage packages and sources
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

bootstrap use-package, so I can use it to manage everything else
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
#+END_SRC

Finally require use-package
#+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'use-package))
#+END_SRC

* Interface
Build interface to look how I want it to look

Remove all that excess crap I don't need, remove the menu bar the
scroll bar and the toolbar

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

Set font that is bit easier to read and nice and big

#+BEGIN_SRC emacs-lisp
  (set-default-font "-*-DejaVu Sans Mono-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1")
#+END_SRC

Give more descriptive names to buffers that have the same name. In
this case it uses the folder it's in

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC

Why write out yes or no every single time when y and n will suffice

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Always require a new line

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

I like my lines highlighted and numbered

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
  (global-linum-mode t)
#+END_SRC

Visual cue for when lines are too long

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :diminish whitespace-mode
    :init
    (setq whitespace-line-column 80)
    (setq whitespace-style '(face lines-tail))
    (add-hook 'prog-mode-hook 'whitespace-mode))
#+END_SRC

Never use tabs and by default lets use two spaces. We can change it
depending on the language

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default standard-indent 2)
#+END_SRC

When searching make to highlight things I search for

#+BEGIN_SRC emacs-lisp
  (setq query-replace-highlight t)
#+END_SRC

Backups are more trouble than they are worth. That's why God (Linus
Torvald) created git

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-list-file-name  nil)
  (setq auto-save-default nil)
#+END_SRC

Automatically revert buffers to new content if unchanged

#+BEGIN_SRC emacs-lisp
  (put 'erase-buffer 'disabled nil)
  (global-auto-revert-mode t)
  (diminish 'auto-revert-mode)
#+END_SRC

Remove the whole start up screen and show a visible bell

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

Show visible bell, good for when the sound is muted

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

Make dired more verbose

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-alhv")
#+END_SRC

When splitting buffers move to that new buffer immediately

#+BEGIN_SRC emacs-lisp
  (defun split-window-below-and-move()
    (interactive)
    (split-window-below)
    (other-window 1))

  ;; auto move cursor after split
  (defun split-window-right-and-move()
    (interactive)
    (split-window-right)
    (other-window 1))

  (global-set-key "\C-x2" 'split-window-below-and-move)

  (global-set-key "\C-x3" 'split-window-right-and-move)
#+END_SRC

Ask before closing Emacs

#+BEGIN_SRC emacs-lisp
(defun ask-before-closing ()
  "Ask whether or not to close, and then close if y was pressed"
  (interactive)
  (if (y-or-n-p (format "Exit Emacs? "))
      (if (< emacs-major-version 22)
          (save-buffers-kill-terminal)
        (save-buffers-kill-emacs))
    (message "Canceled exit")))

(when window-system
  (global-set-key (kbd "C-x C-c") 'ask-before-closing))
#+END_SRC

* Theme
Use solarized light for theme

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :init
    (setq solarized-high-contrast-mode-line t)
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    :config
    (load-theme 'solarized-light t))
#+END_SRC

* Evil Mode

Use evil mode for most editing

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (use-package linum-relative)
    (use-package evil-surround
      :config
      (global-evil-surround-mode 1))
    (setq evil-toggle-key "C-`")
    :config
    (evil-mode 1))
#+END_SRC

* Editing
No need to have trailing whitespace

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Use CUA for block editing

#+BEGIN_SRC emacs-lisp
  (setq cua-enable-cua-keys nil)
  (cua-mode t)
#+END_SRC

Use Hippie Expand to expand things

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-SPC") 'hippie-expand)
#+END_SRC

Move by subwords ie treat underscore as space

#+BEGIN_SRC emacs-lisp
  (global-subword-mode t)
  (diminish 'subword-mode)
#+END_SRC

Set default spacing for all documents
#+BEGIN_SRC emacs-lisp
  (setq default-tab-width 2)
  (setq sh-basic-offset 2)
  (setq sh-indentation 2)
#+END_SRC

Break on commas
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-,") 'tabfugnic/break-on-comma)
  (global-set-key (kbd "C-;") 'tabfugnic/toggle-single-or-multiline-list)

  (defun tabfugnic/break-on-comma()
    (interactive)
    (while (not (looking-at ","))
      (forward-char))
    (forward-char)
    (if (not (looking-at "^J"))
        (newline-and-indent)))

  (defun tabfugnic/toggle-single-or-multiline-list()
    (interactive)
    (if (not (tabfugnic/singleline-p))
        (tabfugnic/singleline-list)
      (tabfugnic/multiline-list)))

  (defun tabfugnic/multiline-list()
    (interactive)
    (let ((beg (point)))
      (forward-char)
      (newline-and-indent)
      (end-of-line 0)
      (backward-char)
      (forward-list)
      (backward-char)
      (if (not (looking-at ","))
          (insert ","))
      (while (<= beg (point))
        (backward-char)
        (when (and (looking-at ",") (tabfugnic/in-parent-list-p beg))
          (forward-char)
          (newline-and-indent)
          (previous-line)
          (end-of-line)
          (backward-char))
        )
      (forward-char)))

  (defun tabfugnic/singleline-list()
    (interactive)
    (let ((beg (line-number-at-pos)))
      (forward-list)
      (while (< beg (line-number-at-pos))
        (join-line))
      (backward-char)
      (forward-list)
      (backward-char 2)
      (if (looking-at ",")
          (delete-forward-char 1))
      (forward-char)
      (backward-list)))

  (defun tabfugnic/singleline-p()
    (let ((beg-line (line-number-at-pos)) (start (point)))
      (forward-list)
      (let ((end-line (line-number-at-pos)))
        (goto-char start)
        (eq beg-line end-line))))

  (defun tabfugnic/in-parent-list-p(parent-beg)
    (let ((start (point)))
      (backward-up-list)
      (when (eq parent-beg (point))
        (goto-char start)
        t)))

#+END_SRC
* Ido

Use ido mode for poking through files and take advantage of ido vertical

#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (use-package ido-vertical-mode
    :init
    (setq ido-enable-flex-matching t) ; fuzzy matching is a must have
    (setq ido-max-directory-size 100000)
    (setq ido-everywhere t)
    :config
    (ido-vertical-mode t)

    (defun tabfugnic/ido-define-keys () ;; C-n/p is more intuitive in vertical layout
      (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
      (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
    (add-hook 'ido-setup-hook 'tabfugnic/ido-define-keys))
#+END_SRC

* Multiple Cursor
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind
    ("C-S-c C-S-c" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c C-<" . mc/mark-all-like-this))
#+END_SRC

* Helm

Helm for most things involving input

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :bind ("M-x" . helm-M-x)
    :init
    (use-package helm-ag
      :init
      (setq helm-M-x-fuzzy-match t))
    (progn
      (require 'helm-config)
      (helm-mode)))
#+END_SRC

* Dired

Use a better dired, now with extras

#+BEGIN_SRC emacs-lisp
(require 'dired-x)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-global-mode))
#+END_SRC

* Emacs Lisp

Auto compile elisp files on load/save.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config
    (auto-compile-on-load-mode)
    (auto-compile-on-save-mode))
  (setq load-prefer-newer t)
#+END_SRC

* Java

Add imports to java file quickly and easily
#+BEGIN_SRC emacs-lisp
  (use-package java-imports)
#+END_SRC

* Android

Use android major mode

#+BEGIN_SRC emacs-lisp
  (use-package android-mode
    :config
    (custom-set-variables '(android-mode-sdk-dir "~/opt/android")))
#+END_SRC

* Electric pair

Use electric pair to automatically match surrounding characters

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
  (show-paren-mode 1)
#+END_SRC

* C/C++

#+BEGIN_SRC emacs-lisp
  (c-set-offset 'arglist-intro '+)
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

* Cucumber
#+BEGIN_SRC emacs-lisp
(use-package feature-mode
  :mode "\\.feature$")
#+END_SRC

* Eclim
#+BEGIN_SRC emacs-lisp
(use-package eclim
  :config
  (global-eclim-mode))
#+END_SRC

* Emmet
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :init
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))))
#+END_SRC

* Global and GGTags
  #+BEGIN_SRC emacs-lisp
(use-package ggtags
  :config
  (add-hook 'ruby-mode-hook ( lambda() ( ggtags-mode 1 ))))
#+END_SRC

* Golden ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :diminish golden-ratio-mode
    :init
    (setq golden-ratio-auto-scale t)
    :config
    (golden-ratio-mode 1))
#+END_SRC

* Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :init
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-decl-scan)
  :bind
  (:map haskell-mode-map
        ("C-," . haskell-move-nested-left)
        ("C-." . haskell-move-nested-right)
        ("C-c C-c" . haskell-compile)))
#+END_SRC

* Web dev
Use web dev for ERB and html. Makes life so much easier than Multi Major Mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.html\\.erb$" . web-mode)))
#+END_SRC

Definitely need Slim mode

#+BEGIN_SRC emacs-lisp
  (use-package slim-mode)
#+END_SRC

* JSON
Basic json parsing

#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC

* Javascript/Coffee
#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :mode ("\\.coffee$" "Cakefile")
  :init
  (setq coffee-tab-width 2))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :init
  (setq auto-mode-alist (cons '("\\.js$" . javascript-mode) auto-mode-alist))
  (setq js-indent-level 2))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; JSX mode
(use-package rjsx-mode)
#+END_SRC

* Git(Magit)
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :init
    (use-package magithub
      :config (magithub-feature-autoinject t))
    :config
    (magit-define-popup-action 'magit-branch-popup
      ?K "Delete local and remote" 'tabfugnic/magit-delete-branch)

    (defun tabfugnic/magit-delete-branch (branch)
      (interactive
       (magit-read-local-branch "Delete branch" (magit-get-previous-branch)))
      (magit-run-git "delete-branch" "" branch)))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))
#+END_SRC

* Move shit
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :config
  (move-text-default-bindings))
#+END_SRC

* Email(mu4e)
Use mu4e for all email. This takes advantage of offlineimap and msmtp

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :load-path "/usr/local/share/emacs/site-lisp/mu4e"
    :ensure f
    :bind ("C-x m" . mu4e)
    :init
    (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
    (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign)
    (add-hook 'mu4e-compose-mode-hook
              (defun my-setup-epa-hook ()
                (epa-mail-mode)))
    (add-hook 'mu4e-view-mode-hook
              (defun my-view-mode-hook ()
                (epa-mail-mode)))
    (use-package mu4e-alert
      :init
      (setq mu4e-maildir-shortcuts
            '( ("/INBOX"               . ?i)
               ("/sent"                . ?s)
               ("/trash"               . ?t)
               ("/archive"             . ?a)))

      (mu4e-alert-set-default-style 'libnotify)
      (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
      (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))


    :config
    (require 'org-mu4e)
    (setq mu4e-contexts
          `(,(make-mu4e-context
              :name "personal"
              :match-func (lambda (msg)
                            (when msg
                              (mu4e-message-contact-field-matches msg
                                                                  :to "tabfugnic@gmail.com")))
              :enter-func '()
              :leave-func (lambda () (mu4e-clear-caches))
              :vars '((mu4e-maildir . "~/mail/personal")
                      (mu4e-mu-home . "~/.mu/personal")
                      (mu4e-get-mail-command . "offlineimap -a personal")
                      (user-mail-address . "tabfugnic@gmail.com")
                      (mu4e-compose-signature . (concat
                                                 "Eric J. Collins\n"
                                                 "Software Developer\n"
                                                 "thoughtbot\n")
                                              )))
            ,(make-mu4e-context
              :name "thoughtbot"
              :match-func (lambda (msg)
                            (when msg
                              (mu4e-message-contact-field-matches msg
                                                                  :to "eric@thoughtbot.com")))
              :enter-func '()
              :leave-func (lambda () (mu4e-clear-caches))
              :vars '((mu4e-maildir . "~/mail/thoughtbot")
                      (mu4e-mu-home . "~/.mu/thoughtbot")
                      (mu4e-get-mail-command . "offlineimap -a thoughtbot")
                      (user-mail-address . "eric@thoughtbot.com")
                      (mu4e-compose-signature . (concat
                                                 "Eric J. Collins\n"
                                                 "Software Developer\n"
                                                 "thoughtbot\n")
                                              )))))

    (setq mu4e-drafts-folder "/drafts")
    (setq mu4e-sent-folder   "/sent")
    (setq mu4e-trash-folder  "/trash")
    (setq mu4e-refile-folder "/archive")
    (setq mu4e-sent-messages-behavior 'delete)

    (setq mu4e-html2text-command 'mu4e-shr2text)

    (setq user-full-name  "Eric J Collins")
    (setq mu4e-update-interval 180)

    (setq message-send-mail-function 'message-send-mail-with-sendmail)
    (setq sendmail-program "/usr/bin/msmtp")
    (setq message-sendmail-extra-arguments '("--read-envelope-from"))
    (setq message-sendmail-f-is-evil 't)

    (setq mu4e-alert-interesting-mail-query
          (concat
           "flag:unread"
           " AND NOT flag:trashed"
           " AND maildir:"
           "\"/INBOX\""))

    (setq org-mu4e-link-query-in-headers-mode nil)

    (add-to-list 'mu4e-view-actions
                 '("xViewXWidget" . mu4e-action-view-with-xwidget) t))
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (require 'org-agenda)
  (setq org-directory "~/Dropbox/org/")

  (defun org-file (file)
    (concat org-directory file))

  (setq org-agenda-files (list (org-file "index.org")))

  (setq org-capture-templates
        '(("t" "TODO"
           entry
           (file (org-file "index.org"))
           "* TODO %?\n %u\n")
          ("v" "Travel"
           plain
           (file (org-file "travel.org"))
           "* %a\n %^G\n")
          ("i" "Idea"
           entry
           (file (org-file "ideas.org"))
           "* %?\n %u\n")
          ("m" "Movies"
           entry
           (file (org-file "movies.org"))
           "* TODO %?\n %u\n")
          ("n" "Names"
           entry
           (file (org-file "names.org"))
           "* %? :boy:\n")
          ("c" "Configurations"
           entry
           (file (org-file "config.org"))
           "* %?\n")))

  (defun org-agenda-complete-and-archive ()
    (interactive)
    (org-agenda-todo 'done)
    (org-agenda-archive-default))

  (defun org-complete-and-archive ()
    (interactive)
    (org-todo 'done)
    (org-archive-default))

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (define-key org-agenda-mode-map (kbd "C-c f") 'org-agenda-complete-and-archive)
  (define-key org-mode-map (kbd "C-c f") 'org-complete-and-archive))
#+END_SRC

* PHP
#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :init
  (setq auto-mode-alist (cons '("\\.php$" . php-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.module$" . php-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.install$" . php-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.inc$" . php-mode) auto-mode-alist))

  (setq interpreter-mode-alist (cons '("php" . php-mode) interpreter-mode-alist))
  (setq auto-mode-alist (cons '("\\.phtml$" . php-mode) auto-mode-alist))
  (setq interpreter-mode-alist (cons '("phtml" . php-mode) interpreter-mode-alist)))
#+END_SRC

* Ruby
#+BEGIN_SRC emacs-lisp
;; chruby
(use-package chruby
  :config
  (chruby "2.2.3"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
    :bind (:map rspec-mode ("C-c , u" . tabfugnic/rspec-set-test-env))
    :init
    (add-hook 'haml-mode-hook 'rspec-mode)
    (add-hook 'html-mode-hook 'rspec-mode)
    (add-hook 'slim-mode-hook 'rspec-mode)
    (add-hook 'web-mode-hook 'rspec-mode)
    (add-hook 'coffee-mode-hook 'rspec-mode)
    (add-hook 'ruby-mode-hook 'chruby-use-corresponding)
    :config
    (defun tabfugnic/rspec-set-test-env()
        (interactive)
        (let ((root (directory-file-name (rspec-project-root))))
          (message "setting testing environment database")
          (shell-command (format "%s/bin/rails db:environment:set RAILS_ENV=test" root)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package inf-ruby
    :init
    (add-hook 'after-init-hook 'inf-ruby-switch-setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :init
    (use-package ruby-hash-syntax
      :bind ("C-c r h" . ruby-toggle-hash-syntax))
    (setq auto-mode-alist (cons '("\\.rb$" . ruby-mode) auto-mode-alist))
    (setq auto-mode-alist (cons '("\\.rake$" . ruby-mode) auto-mode-alist))
    (setq auto-mode-alist (cons '("Gemfile" . ruby-mode) auto-mode-alist))
    (setq auto-mode-alist (cons '("Guardfile" . ruby-mode) auto-mode-alist))
    (setq auto-mode-alist (cons '("Rakefile" . ruby-mode) auto-mode-alist))
    (setq interpreter-mode-alist (append '(("ruby" . ruby-mode)) interpreter-mode-alist)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ruby-end
    :diminish ruby-end-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun rspec-toggle-spec-target-in-new-buffer
  (interactive)
  (split-window-right-and-move)
  (rspec-toggle-spec-and-target))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ruby-block
    :diminish ruby-block-mode
    :config
    (ruby-block-mode t))
#+END_SRC

* SCSS Mode
#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :init
  (setq auto-mode-alist (cons '("\\.scss$" . scss-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.scss.erb$" . scss-mode) auto-mode-alist))
  (setq interpreter-mode-alist (cons '("scss" . scss-mode) interpreter-mode-alist))
  (setq interpreter-mode-alist (cons '("scss.erb" . scss-mode) interpreter-mode-alist))
  (setq scss-compile-at-save nil)
  (setq css-indent-offset 2))
#+END_SRC

* Wrap region
#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :config
  (wrap-region-mode t))
#+END_SRC

* Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :init
  (setq auto-mode-alist (cons '("\\.yml$" . yaml-mode) auto-mode-alist))
  (setq interpreter-mode-alist (cons '("yaml" . yaml-mode) interpreter-mode-alist)))
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    (yas-global-mode 1))
#+END_SRC

* ERC
#+BEGIN_SRC emacs-lisp
(use-package erc
  :bind ("C-c e r" . tabfugnic/reset-erc-track-mode)
  :init

  (use-package erc-image
    :config
    (add-to-list 'erc-modules 'image))

  (setq erc-prompt-for-nickserv-password nil)
  (setq erc-fill-function 'erc-fill-static)
  (setq erc-fill-static-center 22)
  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "MODE"))
  (setq erc-hide-list '("JOIN" "PART" "QUIT" "MODE"))

  (setq erc-keywords '("\\NYC\\b"
                       "\\nyc\\b"
                       "\\pr\\b"
                       "\\PR\\b"
                       "\\:statue_of_liberty:\\b"
                       "\\corgi\\b"))

  (setq ercn-notify-rules
        '((current-nick . all)
          (keyword . all)))

  (add-hook 'ercn-notify 'tabfugnic/do-notify)

  :config
  (erc-update-modules)

  (require 'erc-join)
  (setq erc-autojoin-channels-alist
        '(("thoughtbot" "#general")
          ("freenode.net" "#thoughtbot" "#emacs")))
  (erc-autojoin-enable))

(defun tabfugnic/erc-start-or-switch ()
  "Connect to ERC, or switch to last active buffer"
  (interactive)
  (cond
    ((get-buffer "irc.freenode.net:6667")
     (erc-track-switch-buffer 1))
    (t
     (erc :server "irc.freenode.net" :port 6667 :nick "tabfugnic")
     (erc-ssl :server "thoughtbot.irc.slack.com" :port 6667 :nick "eric")
     )))

(defun tabfugnic/reset-erc-track-mode ()
  (interactive)
  (setq erc-modified-channels-alist nil)
  (erc-modified-channels-display))

(defun tabfugnic/do-notify (nickname message)
  (with-temp-buffer
    (shell-command (format "notify-send '%s: %s' -t 5000" nickname message) t)))
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

* Continuous Integration
#+BEGIN_SRC emacs-lisp
  ;; (use-package build-status-mode
  ;;   :defer t
  ;;   :load-path "lisp/"
  ;;   :config
  ;;   (setq build-status-circle-ci-token "0c1f0ad9041a9d2df8eee81bde93e18a01cf42c7"))

#+END_SRC
* Utils
#+BEGIN_SRC emacs-lisp
(defun gitrep()
  (interactive "*")
  (find-file "~/dev"))
#+END_SRC

Sort lines with out case
#+BEGIN_SRC emacs-lisp
  (defun sort-lines-nocase ()
    (interactive)
    (let ((sort-fold-case t))
      (call-interactively 'sort-lines)))
#+END_SRC
